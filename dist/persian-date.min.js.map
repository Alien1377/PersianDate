{"version":3,"sources":["persian-date.js"],"names":["_classCallCheck","instance","Constructor","TypeError","toPersianDigit","digit","toString","isArray","input","Object","prototype","call","isString","isNumber","isDate","Date","isUndefined","leftZeroFill","number","targetLength","output","length","normalizeDuration","unit","value","arguments","durationUnit","year","indexOf","month","day","hour","minute","second","absRound","Math","ceil","floor","mod","a","b","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","Algorithms","this","j","GREGORIAN_EPOCH","isLeapGregorian","jd","wjd","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","yearday","gregorianToJd","leapadj","Array","epbase","epyear","PERSIAN_EPOCH","cycle","cyear","ycycle","aux1","aux2","yday","persianToJd","date","jdToGregorian","perscal","jdToPersian","weekday","jwday","gd","pa","calcGregorian","getFullYear","getMonth","getDate","monthDayNumber","weekDayNumber","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","timeZoneOffset","getTimezoneOffset","parray","pd","calcPersian","gDate","setYear","setMonth","setDate","setHours","setMinutes","setSeconds","setMilliseconds","pDate","millisecond","week","monthRange","1","name","fa","abbr","2","3","4","5","6","7","8","9","10","11","12","weekRange","0","persianDaysName","Duration","duration","data","_data","normalizedUnit","ms","years","y","months","M","weeks","w","days","d","h","m","s","_milliseconds","_days","_months","valueOf","String","latinDigit","replace","enDigitArr","peDigitArr","push","charCodeAt","fromCharCode","join","PersianDateClass","algorithms","arrayInput","slice","persianArrayToGregorianDate","substring","parseInt","substr","toPersianDate","version","formatPersian","_utcMode","obj","newYear","newMonth","newDate","newHour","newMinute","newSecond","newMillisecond","self","module","exports","window","Error","inputString","replaceFunction","formatToPersian","info","checkPersian","t","startOf","diff","_t","_t2","_t3","_day","yearDigitArray","split","flag","round","timezone","z","_flag","_hours","_minutes","_z","unix","format","formattingTokens","zone","formatNumber","val","asFloat","inputMoment","subtract","isLeapYear","monthDays","daysInMonth","add","endOf","utcStamp","offsetMils","_updatePDate","utc","isLeapPersian","yearInput","monthInput","timestamp","str","pDateArray","getPersianArrayFromPDate","dateArray","pdate","_valueOf","_unix","_utc","define","amd","PersianDateClassWrapper"],"mappings":"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","file":"persian-date.min.js","sourcesContent":["/*\n** persian-date - v0.2.0\n** Reza Babakhani <babakhani.reza@gmail.com>\n** http://babakhani.github.io/PersianWebToolkit/docs/persian-date/\n** Under WTFPL license \n*/ \n( function () {'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @description Calendar algorithms implementations\n * @author Reza Babakhani\n */\n\nvar Algorithms = function () {\n    function Algorithms() {\n        _classCallCheck(this, Algorithms);\n    }\n\n    _createClass(Algorithms, [{\n        key: 'jwday',\n\n        /**\n         * @param j\n         * @returns {*}\n         */\n        value: function jwday(j) {\n            var mod = function mod(a, b) {\n                return a - b * Math.floor(a / b);\n            };\n            return mod(Math.floor(j + 1.5), 7);\n        }\n\n        /**\n         * @description Is a given year in the Gregorian calendar a leap year ?\n         * @param year\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isLeapGregorian',\n        value: function isLeapGregorian(year) {\n            return year % 4 == 0 && !(year % 100 === 0 && year % 400 != 0);\n        }\n\n        /**\n         * @param year\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isLeapPersian',\n        value: function isLeapPersian(year) {\n            return ((year - (year > 0 ? 474 : 473)) % 2820 + 474 + 38) * 682 % 2816 < 682;\n        }\n\n        /**\n         * Determine Julian day number from Gregorian calendar date\n         * @param year\n         * @param month\n         * @param day\n         * @returns {number}\n         */\n\n    }, {\n        key: 'gregorianToJd',\n        value: function gregorianToJd(year, month, day) {\n            return GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) + -Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400) + Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : this.isLeapGregorian(year) ? -1 : -2) + day);\n        }\n\n        /**\n         * Calculate Gregorian calendar date from Julian day\n         * @param jd\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'jdToGregorian',\n        value: function jdToGregorian(jd) {\n            //let wjd, depoch, quadricent, dqc, cent, dcent, quad, dquad, yindex, dyindex, year, yearday, leapadj;\n            var wjd = Math.floor(jd - 0.5) + 0.5,\n                depoch = wjd - GREGORIAN_EPOCH,\n                quadricent = Math.floor(depoch / 146097),\n                dqc = mod(depoch, 146097),\n                cent = Math.floor(dqc / 36524),\n                dcent = mod(dqc, 36524),\n                quad = Math.floor(dcent / 1461),\n                dquad = mod(dcent, 1461),\n                yindex = Math.floor(dquad / 365),\n                year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n            if (!(cent == 4 || yindex == 4)) {\n                year++;\n            }\n            var yearday = wjd - this.gregorianToJd(year, 1, 1),\n                leapadj = wjd < this.gregorianToJd(year, 3, 1) ? 0 : this.isLeapGregorian(year) ? 1 : 2,\n                month = Math.floor(((yearday + leapadj) * 12 + 373) / 367),\n                day = wjd - this.gregorianToJd(year, month, 1) + 1;\n            return new Array(year, month, day);\n        }\n\n        /**\n         * Determine Julian day from Persian date\n         * @param year\n         * @param month\n         * @param day\n         * @returns {*}\n         */\n\n    }, {\n        key: 'persianToJd',\n        value: function persianToJd(year, month, day) {\n            var epbase = void 0,\n                epyear = void 0;\n            epbase = year - (year >= 0 ? 474 : 473);\n            epyear = 474 + mod(epbase, 2820);\n            return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + Math.floor((epyear * 682 - 110) / 2816) + (epyear - 1) * 365 + Math.floor(epbase / 2820) * 1029983 + (PERSIAN_EPOCH - 1);\n        }\n\n        /**\n         * Calculate Persian date from Julian day\n         * @param jd\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'jdToPersian',\n        value: function jdToPersian(jd) {\n            var year = void 0,\n                month = void 0,\n                day = void 0,\n                depoch = void 0,\n                cycle = void 0,\n                cyear = void 0,\n                ycycle = void 0,\n                aux1 = void 0,\n                aux2 = void 0,\n                yday = void 0;\n            jd = Math.floor(jd) + 0.5;\n            depoch = jd - this.persianToJd(475, 1, 1);\n            cycle = Math.floor(depoch / 1029983);\n            cyear = mod(depoch, 1029983);\n            if (cyear === 1029982) {\n                /* istanbul ignore next */\n                ycycle = 2820;\n            } else {\n                aux1 = Math.floor(cyear / 366);\n                aux2 = mod(cyear, 366);\n                ycycle = Math.floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1;\n            }\n            year = ycycle + 2820 * cycle + 474;\n            if (year <= 0) {\n                year -= 1;\n            }\n            yday = jd - this.persianToJd(year, 1, 1) + 1;\n            month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);\n            day = jd - this.persianToJd(year, month, 1) + 1;\n            return new Array(year, month, day);\n        }\n\n        /**\n         *\n         * @param year\n         * @param month\n         * @param day\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'calcPersian',\n        value: function calcPersian(year, month, day) {\n            var j = this.persianToJd(year, month, day),\n                date = this.jdToGregorian(j);\n            return new Array(date[0], date[1] - 1, date[2]);\n        }\n\n        /**\n         * Perform calculation starting with a Gregorian date\n         * @param year\n         * @param month\n         * @param day\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'calcGregorian',\n        value: function calcGregorian(year, month, day) {\n            //  Update Julian day\n            var j = this.gregorianToJd(year, month + 1, day) + Math.floor(0 + 60 * (0 + 60 * 0) + 0.5) / 86400.0,\n\n            //  Update Persian Calendar\n            perscal = this.jdToPersian(j),\n                weekday = this.jwday(j);\n            return new Array(perscal[0], perscal[1], perscal[2], weekday);\n        }\n\n        /**\n         * Converts a gregorian date to Jalali date for different formats\n         * @param gd\n         * @returns {{}}\n         */\n\n    }, {\n        key: 'toPersianDate',\n        value: function toPersianDate(gd) {\n            var pa = this.calcGregorian(gd.getFullYear(), gd.getMonth(), gd.getDate()),\n                output = {};\n            output.monthDayNumber = pa[2] - 1;\n            if (pa[3] == 6) {\n                output.weekDayNumber = 1;\n            } else if (pa[3] == 5) {\n                output.weekDayNumber = 0;\n            } else if (pa[3] == 4) {\n                output.weekDayNumber = 6;\n            } else if (pa[3] == 3) {\n                output.weekDayNumber = 5;\n            } else if (pa[3] == 2) {\n                output.weekDayNumber = 4;\n            } else if (pa[3] == 1) {\n                output.weekDayNumber = 3;\n            } else if (pa[3] == 0) {\n                output.weekDayNumber = 2;\n            }\n            output.year = pa[0];\n            output.month = pa[1];\n            output.day = output.weekDayNumber;\n            output.date = pa[2];\n            output.hours = gd.getHours();\n            output.minutes = gd.getMinutes() < 10 ? '0' + gd.getMinutes() : gd.getMinutes();\n            output.seconds = gd.getSeconds();\n            output.milliseconds = gd.getMilliseconds();\n            output.timeZoneOffset = gd.getTimezoneOffset();\n            return output;\n        }\n\n        /**\n         *\n         * @param parray persian-date array\n         * @returns {Date}\n         */\n\n    }, {\n        key: 'persianArrayToGregorianDate',\n        value: function persianArrayToGregorianDate(parray) {\n            // Howha : javascript Cant Parse this array truly 2011,2,20\n            var pd = this.calcPersian(parray[0] ? parray[0] : 0, parray[1] ? parray[1] : 1, parray[2] ? parray[2] : 1),\n                gDate = new Date(pd[0], pd[1], pd[2]);\n            gDate.setYear(pd[0]);\n            gDate.setMonth(pd[1]);\n            gDate.setDate(pd[2]);\n            gDate.setHours(parray[3] ? parray[3] : 0);\n            gDate.setMinutes(parray[4] ? parray[4] : 0);\n            gDate.setSeconds(parray[5] ? parray[5] : 0);\n            gDate.setMilliseconds(parray[6] ? parray[6] : 0);\n            return gDate;\n        }\n\n        /**\n         *\n         * @param pDate\n         * @returns {array}\n         */\n\n    }, {\n        key: 'getPersianArrayFromPDate',\n        value: function getPersianArrayFromPDate(pDate) {\n            return [pDate.year, pDate.month, pDate.date, pDate.hours, pDate.minutes, pDate.seconds, pDate.milliseconds];\n        }\n    }]);\n\n    return Algorithms;\n}();\n'use strict';\n\n/**\n * Constants\n * @module constants\n */\n\nvar durationUnit = {\n    year: ['y', 'years', 'year'],\n    month: ['M', 'months', 'month'],\n    day: ['d', 'days', 'day'],\n    hour: ['h', 'hours', 'hour'],\n    minute: ['m', 'minutes', 'minute'],\n    second: ['s', 'second', 'seconds'],\n    millisecond: ['ms', 'milliseconds', 'millisecond'],\n    week: ['w', '', 'weeks', 'week']\n},\n\n\n/**\n *\n * @type {number}\n */\nGREGORIAN_EPOCH = 1721425.5,\n\n\n/**\n *\n * @type {number}\n */\nPERSIAN_EPOCH = 1948320.5,\n\n\n/**\n *\n * @type {{}}\n */\nmonthRange = {\n    1: {\n        name: {\n            fa: \"فروردین\"\n        },\n        abbr: {\n            fa: \"فرو\"\n        }\n    },\n    2: {\n        name: {\n            fa: \"اردیبهشت\"\n        },\n        abbr: {\n            fa: \"ارد\"\n        }\n    },\n    3: {\n        name: {\n            fa: \"خرداد\"\n        },\n        abbr: {\n            fa: \"خرد\"\n        }\n    },\n    4: {\n        name: {\n            fa: \"تیر\"\n        },\n        abbr: {\n            fa: \"تیر\"\n        }\n    },\n    5: {\n        name: {\n            fa: \"مرداد\"\n        },\n        abbr: {\n            fa: \"مرد\"\n        }\n    },\n    6: {\n        name: {\n            fa: \"شهریور\"\n        },\n        abbr: {\n            fa: \"شهر\"\n        }\n    },\n    7: {\n        name: {\n            fa: \"مهر\"\n        },\n        abbr: {\n            fa: \"مهر\"\n        }\n    },\n    8: {\n        name: {\n            fa: \"آبان\"\n        },\n        abbr: {\n            fa: \"آبا\"\n        }\n\n    },\n    9: {\n        name: {\n            fa: \"آذر\"\n        },\n        abbr: {\n            fa: \"آذر\"\n        }\n    },\n    10: {\n        name: {\n            fa: \"دی\"\n        },\n        abbr: {\n            fa: \"دی\"\n        }\n    },\n    11: {\n        name: {\n            fa: \"بهمن\"\n        },\n        abbr: {\n            fa: \"بهم\"\n        }\n    },\n    12: {\n        name: {\n            fa: \"اسفند\"\n        },\n        abbr: {\n            fa: \"اسف\"\n        }\n    }\n},\n\n\n/**\n *\n * @type {{}}\n */\nweekRange = {\n    1: {\n        name: {\n            fa: \"شنبه\"\n        },\n        abbr: {\n            fa: \"ش\"\n        }\n    },\n    2: {\n        name: {\n            fa: \"یکشنبه\"\n        },\n        abbr: {\n            fa: \"ی\"\n        }\n    },\n    3: {\n        name: {\n            fa: \"دوشنبه\"\n        },\n        abbr: {\n            fa: \"د\"\n        }\n    },\n    4: {\n        name: {\n            fa: \"سه شنبه\"\n        },\n        abbr: {\n            fa: \"س\"\n        }\n    },\n    5: {\n        name: {\n            fa: \"چهار شنبه\"\n        },\n        abbr: {\n            fa: \"چ\"\n        }\n    },\n    6: {\n        name: {\n            fa: \"پنج شنبه\"\n        },\n        abbr: {\n            fa: \"پ\"\n        }\n    },\n    0: {\n        name: {\n            fa: \"جمعه\"\n        },\n        abbr: {\n            fa: \"ج\"\n        }\n    }\n},\n\n\n/**\n *\n * @type {string[]}\n */\npersianDaysName = [\"اورمزد\", \"بهمن\", \"اوردیبهشت\", \"شهریور\", \"سپندارمذ\", \"خورداد\", \"امرداد\", \"دی به آذز\", \"آذز\", \"آبان\", \"خورشید\", \"ماه\", \"تیر\", \"گوش\", \"دی به مهر\", \"مهر\", \"سروش\", \"رشن\", \"فروردین\", \"بهرام\", \"رام\", \"باد\", \"دی به دین\", \"دین\", \"ارد\", \"اشتاد\", \"آسمان\", \"زامیاد\", \"مانتره سپند\", \"انارام\", \"زیادی\"];\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Duration object constructor\n * @param duration\n * @class Duration\n * @constructor\n */\nvar Duration = function Duration(key, value) {\n    _classCallCheck(this, Duration);\n\n    var duration = {},\n        data = this._data = {},\n        milliseconds = 0,\n        normalizedUnit = normalizeDuration(key, value),\n        unit = normalizedUnit.unit;\n    duration[unit] = normalizedUnit.value;\n    milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;\n\n    var years = duration.years || duration.year || duration.y || 0,\n        months = duration.months || duration.month || duration.M || 0,\n        weeks = duration.weeks || duration.w || duration.week || 0,\n        days = duration.days || duration.d || duration.day || 0,\n        hours = duration.hours || duration.hour || duration.h || 0,\n        minutes = duration.minutes || duration.minute || duration.m || 0,\n        seconds = duration.seconds || duration.second || duration.s || 0;\n    // representation for dateAddRemove\n    this._milliseconds = milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;\n    // Because of dateAddRemove treats 24 hours as different from a\n    // day when working around DST, we need to store them separately\n    this._days = days + weeks * 7;\n    // It is impossible translate months into days without knowing\n    // which months you are are talking about, so we have to store\n    // it separately.\n    this._months = months + years * 12;\n    // The following code bubbles up values, see the tests for\n    // examples of what that means.\n    data.milliseconds = milliseconds % 1000;\n    seconds += milliseconds / 1000;\n    data.seconds = seconds % 60;\n    minutes += absRound(seconds / 60);\n    data.minutes = minutes % 60;\n    hours += absRound(minutes / 60);\n    data.hours = hours % 24;\n    days += absRound(hours / 24);\n    days += weeks * 7;\n    data.days = days % 30;\n    months += absRound(days / 30);\n    data.months = months % 12;\n    years += absRound(months / 12);\n    data.years = years;\n    return this;\n};\n\n/**\n *\n * @type {{valueOf: Duration.valueOf}}\n */\n\n\nDuration.prototype = {\n    valueOf: function valueOf() {\n        return this._milliseconds + this._days * 864e5 + this._months * 2592e6;\n    }\n};\n'use strict';\n\n/**\n * @description convert latin digit to persian digit by extend string prototype\n * @param latinDigit\n * @returns {string} Persian equivalent unicode character of the given latin digits.\n */\nString.prototype.toPersianDigit = function (latinDigit) {\n    return this.replace(/\\d+/g, function (digit) {\n        var enDigitArr = [],\n            peDigitArr = [],\n            i = void 0,\n            j = void 0;\n        for (i = 0; i < digit.length; i += 1) {\n            enDigitArr.push(digit.charCodeAt(i));\n        }\n        for (j = 0; j < enDigitArr.length; j += 1) {\n            peDigitArr.push(String.fromCharCode(enDigitArr[j] + (!!latinDigit && latinDigit === true ? 1584 : 1728)));\n        }\n        return peDigitArr.join('');\n    });\n};\n\n/**\n * @description return converted string to persian digit\n * @param digit\n * @returns {string|*}\n */\nfunction toPersianDigit(digit) {\n    return digit.toString().toPersianDigit();\n}\n\n/**\n * @param input\n * @returns {boolean}\n */\nfunction isArray(input) {\n    return Object.prototype.toString.call(input) === '[object Array]';\n}\n\n/**\n * @param input\n * @returns {boolean}\n */\nfunction isString(input) {\n    return typeof input === \"string\";\n}\n\n/**\n *\n * @param input\n * @returns {boolean}\n */\nfunction isNumber(input) {\n    return typeof input === \"number\";\n}\n\n/**\n *\n * @param input\n * @returns {boolean}\n */\nfunction isDate(input) {\n    return input instanceof Date;\n}\n\n/**\n *\n * @param input\n * @returns {boolean}\n */\nfunction isUndefined(input) {\n    return typeof input === \"undefined\";\n}\n\n/**\n * @param number\n * @param targetLength\n * @returns {string}\n */\nfunction leftZeroFill(number, targetLength) {\n    var output = number + '';\n    while (output.length < targetLength) {\n        output = '0' + output;\n    }\n    return output;\n}\n\n/**\n * @description normalize duration params and return valid param\n * @return {{unit: *, value: *}}\n */\nfunction normalizeDuration() {\n    var unit = void 0,\n        value = void 0;\n    if (isString(arguments[0])) {\n        unit = arguments[0];\n        value = arguments[1];\n    } else {\n        value = arguments[0];\n        unit = arguments[1];\n    }\n    if (durationUnit.year.indexOf(unit) > -1) {\n        unit = 'year';\n    } else if (durationUnit.month.indexOf(unit) > -1) {\n        unit = 'month';\n    } else if (durationUnit.day.indexOf(unit) > -1) {\n        unit = 'day';\n    } else if (durationUnit.hour.indexOf(unit) > -1) {\n        unit = 'hour';\n    } else if (durationUnit.minute.indexOf(unit) > -1) {\n        unit = 'minute';\n    } else if (durationUnit.second.indexOf(unit) > -1) {\n        unit = 'second';\n    }\n    return {\n        unit: unit,\n        value: value\n    };\n}\n\n/**\n *\n * @param number\n * @returns {number}\n */\nfunction absRound(number) {\n    if (number < 0) {\n        return Math.ceil(number);\n    } else {\n        return Math.floor(number);\n    }\n}\n\n/**\n *\n * @param a\n * @param b\n * @returns {number}\n */\nfunction mod(a, b) {\n    return a - b * Math.floor(a / b);\n}\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PersianDateClass = function () {\n    function PersianDateClass(input) {\n        _classCallCheck(this, PersianDateClass);\n\n        this.algorithms = new Algorithms();\n        // Convert Any thing to Gregorian Date\n        if (isUndefined(input)) {\n            this.gDate = new Date();\n        } else if (isDate(input)) {\n            this.gDate = input;\n        } else if (isArray(input)) {\n            //  Encapsulate Input Array\n            var arrayInput = input.slice();\n            this.gDate = this.algorithms.persianArrayToGregorianDate(arrayInput);\n        } else if (isNumber(input)) {\n            this.gDate = new Date(input);\n        }\n        // instance of pDate\n        else if (input instanceof PersianDateClass) {\n                this.gDate = input.gDate;\n            }\n            // ASP.NET JSON Date\n            else if (input.substring(0, 6) === \"/Date(\") {\n                    this.gDate = new Date(parseInt(input.substr(6)));\n                }\n        this.pDate = this.algorithms.toPersianDate(this.gDate);\n        this.version = \"0.2.0\";\n        this.formatPersian = \"_default\";\n        this._utcMode = false;\n        return this;\n    }\n\n    /**\n     * @description return Duration object\n     * @param input\n     * @param key\n     * @returns {Duration}\n     */\n\n\n    _createClass(PersianDateClass, [{\n        key: \"duration\",\n        value: function duration(input, key) {\n            return new Duration(input, key);\n        }\n\n        /**\n         * @description check if passed object is duration\n         * @param obj\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isDuration\",\n        value: function isDuration(obj) {\n            return obj instanceof Duration;\n        }\n\n        /**\n         *\n         * @param key\n         * @param input\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: \"add\",\n        value: function add(key, value) {\n            var duration = new Duration(key, value)._data;\n            // log(duration)\n            if (duration.years > 0) {\n                var newYear = this.year() + duration.years;\n                this.year(newYear);\n            }\n            if (duration.months > 0) {\n                var newMonth = this.month() + duration.months;\n                this.month(newMonth);\n            }\n            if (duration.days > 0) {\n                var newDate = this.date() + duration.days;\n                this.date(newDate);\n            }\n            if (duration.hours > 0) {\n                var newHour = this.hour() + duration.hours;\n                this.hour(newHour);\n            }\n            if (duration.minutes > 0) {\n                var newMinute = this.minute() + duration.minutes;\n                this.minute(newMinute);\n            }\n            if (duration.seconds > 0) {\n                var newSecond = this.second() + duration.seconds;\n                this.second(newSecond);\n            }\n            if (duration.milliseconds > 0) {\n                // log('add millisecond')\n                var newMillisecond = this.milliseconds() + duration.milliseconds;\n                this.milliseconds(newMillisecond);\n            }\n            return new PersianDateClass(this.valueOf());\n        }\n\n        /**\n         *\n         * @param key\n         * @param input\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: \"subtract\",\n        value: function subtract(key, value) {\n            var duration = new Duration(key, value)._data;\n            // log(duration)\n            if (duration.years > 0) {\n                var newYear = this.year() - duration.years;\n                this.year(newYear);\n            }\n            if (duration.months > 0) {\n                var newMonth = this.month() - duration.months;\n                this.month(newMonth);\n            }\n            if (duration.days > 0) {\n                var newDate = this.date() - duration.days;\n                this.date(newDate);\n            }\n            if (duration.hours > 0) {\n                var newHour = this.hour() - duration.hours;\n                this.hour(newHour);\n            }\n            if (duration.minutes > 0) {\n                var newMinute = this.minute() - duration.minutes;\n                this.minute(newMinute);\n            }\n            if (duration.seconds > 0) {\n                var newSecond = this.second() - duration.seconds;\n                this.second(newSecond);\n            }\n            if (duration.milliseconds > 0) {\n                // log('add millisecond')\n                var newMillisecond = this.milliseconds() - duration.milliseconds;\n                this.milliseconds(newMillisecond);\n            }\n            return new PersianDateClass(this.valueOf());\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n\n    }, {\n        key: \"formatNumber\",\n        value: function formatNumber() {\n            var output = void 0,\n                self = this;\n\n            // if default conf dosent set follow golbal config\n            if (this.formatPersian === \"_default\") {\n                if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n                    /* istanbul ignore next */\n                    if (self.formatPersian === false) {\n                        output = false;\n                    } else {\n                        // Default Conf\n                        output = true;\n                    }\n                }\n                /* istanbul ignore next */\n                else {\n                        if (window.formatPersian === false) {\n                            output = false;\n                        } else {\n                            // Default Conf\n                            output = true;\n                        }\n                    }\n            } else {\n                if (this.formatPersian === true) {\n                    output = true;\n                } else if (this.formatPersian === false) {\n                    output = false;\n                } else {\n                    Error(\"Invalid Config 'formatPersian' !!\");\n                }\n            }\n            return output;\n        }\n\n        /**\n         *\n         * @param inputString\n         * @returns {*}\n         */\n\n    }, {\n        key: \"format\",\n        value: function format(inputString) {\n            var self = this,\n                formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DD?D?D?|ddddd|dddd?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|X|LT|ll?l?l?|LL?L?L?)/g,\n                info = {\n                year: self.year(),\n                month: self.month(),\n                hour: self.hours(),\n                minute: self.minutes(),\n                second: self.seconds(),\n                date: self.date(),\n                timezone: self.zone(),\n                unix: self.unix()\n            },\n                formatToPersian = self.formatNumber();\n\n            var checkPersian = function checkPersian(i) {\n                if (formatToPersian) {\n                    return toPersianDigit(i);\n                } else {\n                    return i;\n                }\n            };\n\n            function replaceFunction(input) {\n                switch (input) {\n                    // AM/PM\n                    case \"a\":\n                        {\n                            if (formatToPersian) return info.hour >= 12 ? 'ب ظ' : 'ق ظ';else return info.hour >= 12 ? 'PM' : 'AM';\n                        }\n                    // Hours (Int)\n                    case \"H\":\n                        {\n                            return checkPersian(info.hour);\n                        }\n                    case \"HH\":\n                        {\n                            return checkPersian(leftZeroFill(info.hour, 2));\n                        }\n                    case \"h\":\n                        {\n                            return checkPersian(info.hour % 12);\n                        }\n                    case \"hh\":\n                        {\n                            return checkPersian(leftZeroFill(info.hour % 12, 2));\n                        }\n                    // Minutes\n                    case \"m\":\n                        {\n                            return checkPersian(leftZeroFill(info.minute, 2));\n                        }\n                    // Two Digit Minutes\n                    case \"mm\":\n                        {\n                            return checkPersian(leftZeroFill(info.minute, 2));\n                        }\n                    // Second\n                    case \"s\":\n                        {\n                            return checkPersian(info.second);\n                        }\n                    case \"ss\":\n                        {\n                            return checkPersian(leftZeroFill(info.second, 2));\n                        }\n                    // Day (Int)\n                    case \"D\":\n                        {\n                            return checkPersian(leftZeroFill(info.date));\n                        }\n                    // Return Two Digit\n                    case \"DD\":\n                        {\n                            return checkPersian(leftZeroFill(info.date, 2));\n                        }\n                    // Return day Of Month\n                    case \"DDD\":\n                        {\n                            var t = self.startOf(\"year\");\n                            return checkPersian(leftZeroFill(self.diff(t, \"days\"), 3));\n                        }\n                    // Return Day of Year\n                    case \"DDDD\":\n                        {\n                            var _t = self.startOf(\"year\");\n                            return checkPersian(leftZeroFill(self.diff(_t, \"days\"), 3));\n                        }\n                    // Return day Of week\n                    case \"d\":\n                        {\n                            return checkPersian(self.pDate.weekDayNumber);\n                        }\n                    // Return week day name abbr\n                    case \"ddd\":\n                        {\n                            return weekRange[self.pDate.weekDayNumber].abbr.fa;\n                        }\n                    case \"dddd\":\n                        {\n                            return weekRange[self.pDate.weekDayNumber].name.fa;\n                        }\n                    // Return Persian Day Name\n                    case \"ddddd\":\n                        {\n                            return persianDaysName[self.pDate.monthDayNumber];\n                        }\n                    // Return Persian Day Name\n                    case \"w\":\n                        {\n                            var _t2 = self.startOf(\"year\"),\n                                day = parseInt(self.diff(_t2, \"days\") / 7) + 1;\n                            return checkPersian(day);\n                        }\n                    // Return Persian Day Name\n                    case \"ww\":\n                        {\n                            var _t3 = self.startOf(\"year\"),\n                                _day = leftZeroFill(parseInt(self.diff(_t3, \"days\") / 7) + 1, 2);\n                            return checkPersian(_day);\n                        }\n                    // Month  (Int)\n                    case \"M\":\n                        {\n                            return checkPersian(info.month);\n                        }\n                    // Two Digit Month (Str)\n                    case \"MM\":\n                        {\n                            return checkPersian(leftZeroFill(info.month, 2));\n                        }\n                    // Abbr String of Month (Str)\n                    case \"MMM\":\n                        {\n                            return monthRange[info.month].abbr.fa;\n                        }\n                    // Full String name of Month (Str)\n                    case \"MMMM\":\n                        {\n                            return monthRange[info.month].name.fa;\n                        }\n                    // Year\n                    // Two Digit Year (Str)\n                    case \"YY\":\n                        {\n                            var yearDigitArray = info.year.toString().split(\"\");\n                            return checkPersian(yearDigitArray[2] + yearDigitArray[3]);\n                        }\n                    // Full Year (Int)\n                    case \"YYYY\":\n                        {\n                            return checkPersian(info.year);\n                        }\n                    /* istanbul ignore next */\n                    case \"Z\":\n                        {\n                            var flag = \"+\",\n                                hours = Math.round(info.timezone / 60),\n                                minutes = info.timezone % 60;\n\n                            if (minutes < 0) {\n                                minutes *= -1;\n                            }\n                            if (hours < 0) {\n                                flag = \"-\";\n                                hours *= -1;\n                            }\n\n                            var z = flag + leftZeroFill(hours, 2) + \":\" + leftZeroFill(minutes, 2);\n                            return checkPersian(z);\n                        }\n                    /* istanbul ignore next */\n                    case \"ZZ\":\n                        {\n                            var _flag = \"+\",\n                                _hours = Math.round(info.timezone / 60),\n                                _minutes = info.timezone % 60;\n\n                            if (_minutes < 0) {\n                                _minutes *= -1;\n                            }\n                            if (_hours < 0) {\n                                _flag = \"-\";\n                                _hours *= -1;\n                            }\n                            var _z = _flag + leftZeroFill(_hours, 2) + \"\" + leftZeroFill(_minutes, 2);\n                            return checkPersian(_z);\n                        }\n                    /* istanbul ignore next */\n                    case \"X\":\n                        {\n                            return self.unix();\n                        }\n                    // 8:30 PM\n                    case \"LT\":\n                        {\n                            return self.format(\"h:m a\");\n                        }\n                    // 09/04/1986\n                    case \"L\":\n                        {\n                            return self.format(\"YYYY/MM/DD\");\n                        }\n                    // 9/4/1986\n                    case \"l\":\n                        {\n                            return self.format(\"YYYY/M/D\");\n                        }\n                    // September 4th 1986\n                    case \"LL\":\n                        {\n                            return self.format(\"MMMM DD YYYY\");\n                        }\n                    // Sep 4 1986\n                    case \"ll\":\n                        {\n                            return self.format(\"MMM DD YYYY\");\n                        }\n                    //September 4th 1986 8:30 PM\n                    case \"LLL\":\n                        {\n                            return self.format(\"MMMM YYYY DD   h:m  a\");\n                        }\n                    // Sep 4 1986 8:30 PM\n                    case \"lll\":\n                        {\n                            return self.format(\"MMM YYYY DD   h:m  a\");\n                        }\n                    //Thursday, September 4th 1986 8:30 PM\n                    case \"LLLL\":\n                        {\n                            return self.format(\"dddd D MMMM YYYY  h:m  a\");\n                        }\n                    // Thu, Sep 4 1986 8:30 PM\n                    case \"llll\":\n                        {\n                            return self.format(\"ddd D MMM YYYY  h:m  a\");\n                        }\n                }\n            }\n\n            if (inputString) {\n                return inputString.replace(formattingTokens, replaceFunction);\n            } else {\n                var _inputString = \"YYYY-MM-DD HH:mm:ss a\";\n                return _inputString.replace(formattingTokens, replaceFunction);\n            }\n        }\n\n        /**\n         * Humanize\n         * @returns {string}\n         */\n        // from() {\n        //     return \"Must Implement\";\n        // }\n\n\n        /**\n         *\n         * @returns {string}\n         */\n        // fromNow() {\n        //     return \"Must Implement\";\n        // }\n\n\n        /**\n         *\n         * @returns {string}\n         */\n        // humanizeDuration() {\n        //     return \"Must Implement\";\n        // }\n\n\n        /**\n         *\n         * @returns {Function|PersianDate._d|_d}\n         * @private\n         */\n        // _d() {\n        //     return this.gDate._d;\n        // }\n\n\n        /**\n         *\n         * @param input\n         * @param val\n         * @param asFloat\n         * @returns {*}\n         */\n\n    }, {\n        key: \"diff\",\n        value: function diff(input, val, asFloat) {\n            var self = this,\n                inputMoment = input,\n                zoneDiff = 0,\n                diff = self.gDate - inputMoment.gDate - zoneDiff,\n                year = self.year() - inputMoment.year(),\n                month = self.month() - inputMoment.month(),\n                date = (self.date() - inputMoment.date()) * -1,\n                output = void 0;\n\n            if (val === 'months' || val === 'month') {\n                output = year * 12 + month + date / 30;\n            } else if (val === 'years' || val === 'year') {\n                output = year + (month + date / 30) / 12;\n            } else {\n                output = val === 'seconds' || val === 'second' ? diff / 1e3 : // 1000\n                val === 'minutes' || val === 'minute' ? diff / 6e4 : // 1000 * 60\n                val === 'hours' || val === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                val === 'days' || val === 'day' ? diff / 864e5 : // 1000 * 60 * 60 * 24\n                val === 'weeks' || val === 'week' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7\n                diff;\n            }\n            if (output < 0) {\n                output * -1;\n            }\n            return asFloat ? output : Math.round(output);\n        }\n\n        /**\n         *\n         * @param key\n         * @returns {*}\n         */\n\n    }, {\n        key: \"startOf\",\n        value: function startOf(key) {\n            // Simplify this\n            switch (key) {\n                case \"years\":\n                case \"year\":\n                    return new PersianDateClass([this.year(), 1, 1]);\n                case \"months\":\n                case \"month\":\n                    return new PersianDateClass([this.year(), this.month(), 1]);\n                case \"days\":\n                case \"day\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), 0, 0, 0]);\n                case \"hours\":\n                case \"hour\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), this.hours(), 0, 0]);\n                case \"minutes\":\n                case \"minute\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 0]);\n                case \"seconds\":\n                case \"second\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);\n                case \"weeks\":\n                case \"week\":\n                    var weekDayNumber = this.pDate.weekDayNumber;\n                    if (weekDayNumber === 0) {\n                        return new PersianDateClass([this.year(), this.month(), this.date()]);\n                    } else {\n                        return new PersianDateClass([this.year(), this.month(), this.date()]).subtract(\"days\", weekDayNumber);\n                    }\n                default:\n                    return this;\n            }\n        }\n\n        /**\n         *\n         * @param key\n         * @returns {*}\n         */\n\n    }, {\n        key: \"endOf\",\n        value: function endOf(key) {\n            // Simplify this\n            switch (key) {\n                case \"years\":\n                case \"year\":\n                    var days = this.isLeapYear() ? 30 : 29;\n                    return new PersianDateClass([this.year(), 12, days, 23, 59, 59]);\n                case \"months\":\n                case \"month\":\n                    var monthDays = this.daysInMonth(this.year(), this.month());\n                    return new PersianDateClass([this.year(), this.month(), monthDays, 23, 59, 59]);\n                case \"days\":\n                case \"day\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), 23, 59, 59]);\n                case \"hours\":\n                case \"hour\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), this.hours(), 59, 59]);\n                case \"minutes\":\n                case \"minute\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 59]);\n                case \"seconds\":\n                case \"second\":\n                    return new PersianDateClass([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);\n                case \"weeks\":\n                case \"week\":\n                    var weekDayNumber = this.pDate.weekDayNumber;\n                    if (weekDayNumber === 6) {\n                        weekDayNumber = 7;\n                    } else {\n                        weekDayNumber = 6 - weekDayNumber;\n                    }\n                    return new PersianDateClass([this.year(), this.month(), this.date()]).add(\"days\", weekDayNumber);\n                default:\n                    return this;\n            }\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n\n    }, {\n        key: \"sod\",\n        value: function sod() {\n            return this.startOf(\"day\");\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n\n    }, {\n        key: \"eod\",\n        value: function eod() {\n            return this.endOf(\"day\");\n        }\n\n        /** Get the timezone offset in minutes.\n         * @return {*}\n         */\n\n    }, {\n        key: \"zone\",\n        value: function zone() {\n            return this.pDate.timeZoneOffset;\n        }\n\n        /**\n         *\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: \"local\",\n        value: function local() {\n            var utcStamp = void 0;\n            if (!this._utcMode) {\n                return this;\n            } else {\n                var offsetMils = this.pDate.timeZoneOffset * 60 * 1000;\n                if (this.pDate.timeZoneOffset < 0) {\n                    utcStamp = this.valueOf() - offsetMils;\n                } else {\n                    /* istanbul ignore next */\n                    utcStamp = this.valueOf() + offsetMils;\n                }\n                this.gDate = new Date(utcStamp);\n                this._updatePDate();\n                this._utcMode = false;\n                return this;\n            }\n        }\n    }, {\n        key: \"utc\",\n\n\n        /**\n         * Current date/time in UTC mode\n         * @param input\n         * @returns {*}\n         */\n        value: function utc(input) {\n            var utcStamp = void 0;\n            if (input) {\n                return new PersianDateClass(input).utc();\n            }\n            if (this._utcMode) {\n                return this;\n            } else {\n                var offsetMils = this.pDate.timeZoneOffset * 60 * 1000;\n                if (this.pDate.timeZoneOffset < 0) {\n                    utcStamp = this.valueOf() + offsetMils;\n                } else {\n                    /* istanbul ignore next */\n                    utcStamp = this.valueOf() - offsetMils;\n                }\n                this.gDate = new Date(utcStamp);\n                this._updatePDate();\n                this._utcMode = true;\n                return this;\n            }\n        }\n\n        /**\n         *\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isUtc\",\n        value: function isUtc() {\n            return this._utcMode;\n        }\n\n        /**\n         *\n         * @returns {boolean}\n         * version 0.0.1\n         */\n\n    }, {\n        key: \"isDST\",\n        value: function isDST() {\n            var month = this.month(),\n                day = this.date();\n            if (month < 7) {\n                return false;\n            } else if (month == 7 && day >= 2 || month >= 7) {\n                return true;\n            }\n        }\n\n        /**\n         *\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isLeapYear\",\n        value: function isLeapYear() {\n            return this.algorithms.isLeapPersian(this.year());\n        }\n\n        /**\n         *\n         * @param yearInput\n         * @param monthInput\n         * @returns {number}\n         */\n\n    }, {\n        key: \"daysInMonth\",\n        value: function daysInMonth(yearInput, monthInput) {\n            var year = yearInput ? yearInput : this.year(),\n                month = monthInput ? monthInput : this.month();\n            if (month < 1 || month > 12) return 0;\n            if (month < 7) return 31;\n            if (month < 12) return 30;\n            if (this.algorithms.isLeapPersian(year)) return 30;\n            return 29;\n        }\n\n        /**\n         * Return Native Javascript Date\n         * @returns {*|PersianDate.gDate}\n         */\n\n    }, {\n        key: \"toDate\",\n        value: function toDate() {\n            return this.gDate;\n        }\n\n        /**\n         * Returns Array Of Persian Date\n         * @returns {array}\n         */\n\n    }, {\n        key: \"toArray\",\n        value: function toArray() {\n            return [this.year(), this.month(), this.date(), this.hour(), this.minute(), this.second(), this.millisecond()];\n        }\n\n        /**\n         * Return Milliseconds since the Unix Epoch (1318874398806)\n         * @returns {*}\n         * @private\n         */\n\n    }, {\n        key: \"_valueOf\",\n        value: function _valueOf() {\n            return this.gDate.valueOf();\n        }\n\n        // static unix(timestamp) {\n        //     return this.unix(timestamp);\n        // }\n\n\n    }, {\n        key: \"unix\",\n\n\n        /**\n         * Return Unix Timestamp (1318874398)\n         * @param timestamp\n         * @returns {*}\n         */\n        value: function unix(timestamp) {\n            var output = void 0;\n            if (timestamp) {\n                return new PersianDateClass(timestamp * 1000);\n            } else {\n                var str = this.gDate.valueOf().toString();\n                output = str.substring(0, str.length - 3);\n            }\n            return parseInt(output);\n        }\n\n        /**\n         *\n         * @param obj\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isPersianDate\",\n        value: function isPersianDate(obj) {\n            return obj instanceof PersianDateClass;\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         * Getter Setter\n         */\n\n    }, {\n        key: \"millisecond\",\n        value: function millisecond(input) {\n            return this.milliseconds(input);\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"milliseconds\",\n        value: function milliseconds(input) {\n            if (input) {\n                this.gDate.setMilliseconds(input);\n                this._updatePDate();\n                return this;\n            } else {\n                return this.pDate.milliseconds;\n            }\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"second\",\n        value: function second(input) {\n            return this.seconds(input);\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"seconds\",\n        value: function seconds(input) {\n            if (input | input === 0) {\n                this.gDate.setSeconds(input);\n                this._updatePDate();\n                return this;\n            } else {\n                return this.pDate.seconds;\n            }\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"minute\",\n        value: function minute(input) {\n            return this.minutes(input);\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"minutes\",\n        value: function minutes(input) {\n            if (input || input === 0) {\n                this.gDate.setMinutes(input);\n                this._updatePDate();\n                return this;\n            } else {\n                // TODO: remove this\n                return parseInt(this.pDate.minutes);\n            }\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"hour\",\n        value: function hour(input) {\n            return this.hours(input);\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"hours\",\n        value: function hours(input) {\n            if (input | input === 0) {\n                this.gDate.setHours(input);\n                this._updatePDate();\n                return this;\n            } else {\n                return this.pDate.hours;\n            }\n        }\n\n        /**\n         * Day of Months\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"dates\",\n        value: function dates(input) {\n            return this.date(input);\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"date\",\n        value: function date(input) {\n            if (input || input === 0) {\n                var pDateArray = this.algorithms.getPersianArrayFromPDate(this.pDate);\n                pDateArray[2] = input;\n                this.gDate = this.algorithms.persianArrayToGregorianDate(pDateArray);\n                this._updatePDate();\n                return this;\n            } else {\n                return this.pDate.date;\n            }\n        }\n\n        /**\n         * Day of week\n         * @returns {Function|Date.toJSON.day|date_json.day|PersianDate.day|day|output.day|*}\n         */\n\n    }, {\n        key: \"days\",\n        value: function days() {\n            return this.day();\n        }\n\n        /**\n         *\n         * @returns {Function|Date.toJSON.day|date_json.day|PersianDate.day|day|output.day|*}\n         */\n\n    }, {\n        key: \"day\",\n        value: function day() {\n            return this.pDate.day;\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"month\",\n        value: function month(input) {\n            if (input | input === 0) {\n                var pDateArray = this.algorithms.getPersianArrayFromPDate(this.pDate);\n                pDateArray[1] = input;\n                this.gDate = this.algorithms.persianArrayToGregorianDate(pDateArray);\n                this._updatePDate();\n                return this;\n            } else {\n                return this.pDate.month;\n            }\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"years\",\n        value: function years(input) {\n            return this.year(input);\n        }\n\n        /**\n         *\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: \"year\",\n        value: function year(input) {\n            if (input | input === 0) {\n                var pDateArray = this.algorithms.getPersianArrayFromPDate(this.pDate);\n                pDateArray[0] = input;\n                this.gDate = this.algorithms.persianArrayToGregorianDate(pDateArray);\n                this._updatePDate();\n                return this;\n            } else {\n                return this.pDate.year;\n            }\n        }\n\n        /**\n         *\n         * @param year\n         * @param month\n         * @returns {*}\n         */\n\n    }, {\n        key: \"getFirstWeekDayOfMonth\",\n        value: function getFirstWeekDayOfMonth(year, month) {\n            var dateArray = this.algorithms.calcPersian(year, month, 1),\n                pdate = this.algorithms.calcGregorian(dateArray[0], dateArray[1], dateArray[2]);\n            if (pdate[3] + 2 === 8) {\n                return 1;\n            } else if (pdate[3] + 2 === 7) {\n                return 7;\n            } else {\n                return pdate[3] + 2;\n            }\n        }\n\n        /**\n         *\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: \"clone\",\n        value: function clone() {\n            var self = this;\n            return new PersianDateClass(self.gDate);\n        }\n\n        /**\n         *\n         * @private\n         */\n\n    }, {\n        key: \"_updatePDate\",\n        value: function _updatePDate() {\n            this.pDate = this.algorithms.toPersianDate(this.gDate);\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n\n    }, {\n        key: \"valueOf\",\n        value: function valueOf() {\n            return this._valueOf();\n        }\n    }], [{\n        key: \"_utc\",\n        value: function _utc(input) {\n            if (input) {\n                return new PersianDateClass(input).utc();\n            } else {\n                return new PersianDateClass().utc();\n            }\n        }\n    }, {\n        key: \"_unix\",\n        value: function _unix(timestamp) {\n            if (timestamp) {\n                return new PersianDateClass(timestamp * 1000).unix();\n            } else {\n                return new PersianDateClass().unix();\n            }\n        }\n    }]);\n\n    return PersianDateClass;\n}();\n\n(function () {\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        var pDate = PersianDateClass;\n        pDate.unix = PersianDateClass._unix;\n        pDate.utc = PersianDateClass._utc;\n        module.exports = {\n            pDate: pDate,\n            Duration: Duration\n        };\n    }\n    /* istanbul ignore next */\n    else {\n            if (typeof define === 'function' && define.amd) {\n                define([], function () {\n                    return PersianDateClassWrapper;\n                });\n            } else {\n\n                var PersianDateClassWrapper = function PersianDateClassWrapper(input) {\n                    return new PersianDateClass(input);\n                };\n                PersianDateClassWrapper.unix = PersianDateClass._unix;\n                PersianDateClassWrapper.utc = PersianDateClass._utc;\n                window['pDate'] = window['persianDate'] = PersianDateClassWrapper;\n                window['Duration'] = Duration;\n            }\n        }\n})();\n}());"]}